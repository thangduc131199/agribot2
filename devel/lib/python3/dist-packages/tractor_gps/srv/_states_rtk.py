# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tractor_gps/states_rtkRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class states_rtkRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "tractor_gps/states_rtkRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(states_rtkRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from tractor_gps/states_rtkResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg
import tractor_gps.msg

class states_rtkResponse(genpy.Message):
  _md5sum = "f2b37e695a8f10e8df0555b3b2850dbe"
  _type = "tractor_gps/states_rtkResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """states_hms data


================================================================================
MSG: tractor_gps/states_hms
Header header
uint16 year
uint8 month
uint8 day
uint8 hour
uint8 min
float64 sec
float64[3] data
float64[6] std
float64 age
uint8 Q
uint8 ns
float64 ratio
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['data']
  _slot_types = ['tractor_gps/states_hms']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       data

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(states_rtkResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.data is None:
        self.data = tractor_gps.msg.states_hms()
    else:
      self.data = tractor_gps.msg.states_hms()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.data.header.seq, _x.data.header.stamp.secs, _x.data.header.stamp.nsecs))
      _x = self.data.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_H4Bd().pack(_x.data.year, _x.data.month, _x.data.day, _x.data.hour, _x.data.min, _x.data.sec))
      buff.write(_get_struct_3d().pack(*self.data.data))
      buff.write(_get_struct_6d().pack(*self.data.std))
      _x = self
      buff.write(_get_struct_d2Bd().pack(_x.data.age, _x.data.Q, _x.data.ns, _x.data.ratio))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.data is None:
        self.data = tractor_gps.msg.states_hms()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.data.header.seq, _x.data.header.stamp.secs, _x.data.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.data.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.data.year, _x.data.month, _x.data.day, _x.data.hour, _x.data.min, _x.data.sec,) = _get_struct_H4Bd().unpack(str[start:end])
      start = end
      end += 24
      self.data.data = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 48
      self.data.std = _get_struct_6d().unpack(str[start:end])
      _x = self
      start = end
      end += 18
      (_x.data.age, _x.data.Q, _x.data.ns, _x.data.ratio,) = _get_struct_d2Bd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.data.header.seq, _x.data.header.stamp.secs, _x.data.header.stamp.nsecs))
      _x = self.data.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_H4Bd().pack(_x.data.year, _x.data.month, _x.data.day, _x.data.hour, _x.data.min, _x.data.sec))
      buff.write(self.data.data.tostring())
      buff.write(self.data.std.tostring())
      _x = self
      buff.write(_get_struct_d2Bd().pack(_x.data.age, _x.data.Q, _x.data.ns, _x.data.ratio))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.data is None:
        self.data = tractor_gps.msg.states_hms()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.data.header.seq, _x.data.header.stamp.secs, _x.data.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.data.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.data.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.data.year, _x.data.month, _x.data.day, _x.data.hour, _x.data.min, _x.data.sec,) = _get_struct_H4Bd().unpack(str[start:end])
      start = end
      end += 24
      self.data.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 48
      self.data.std = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=6)
      _x = self
      start = end
      end += 18
      (_x.data.age, _x.data.Q, _x.data.ns, _x.data.ratio,) = _get_struct_d2Bd().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_H4Bd = None
def _get_struct_H4Bd():
    global _struct_H4Bd
    if _struct_H4Bd is None:
        _struct_H4Bd = struct.Struct("<H4Bd")
    return _struct_H4Bd
_struct_d2Bd = None
def _get_struct_d2Bd():
    global _struct_d2Bd
    if _struct_d2Bd is None:
        _struct_d2Bd = struct.Struct("<d2Bd")
    return _struct_d2Bd
class states_rtk(object):
  _type          = 'tractor_gps/states_rtk'
  _md5sum = 'f2b37e695a8f10e8df0555b3b2850dbe'
  _request_class  = states_rtkRequest
  _response_class = states_rtkResponse
