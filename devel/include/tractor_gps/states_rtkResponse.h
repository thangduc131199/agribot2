// Generated by gencpp from file tractor_gps/states_rtkResponse.msg
// DO NOT EDIT!


#ifndef TRACTOR_GPS_MESSAGE_STATES_RTKRESPONSE_H
#define TRACTOR_GPS_MESSAGE_STATES_RTKRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <tractor_gps/states_hms.h>

namespace tractor_gps
{
template <class ContainerAllocator>
struct states_rtkResponse_
{
  typedef states_rtkResponse_<ContainerAllocator> Type;

  states_rtkResponse_()
    : data()  {
    }
  states_rtkResponse_(const ContainerAllocator& _alloc)
    : data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::tractor_gps::states_hms_<ContainerAllocator>  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::tractor_gps::states_rtkResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tractor_gps::states_rtkResponse_<ContainerAllocator> const> ConstPtr;

}; // struct states_rtkResponse_

typedef ::tractor_gps::states_rtkResponse_<std::allocator<void> > states_rtkResponse;

typedef boost::shared_ptr< ::tractor_gps::states_rtkResponse > states_rtkResponsePtr;
typedef boost::shared_ptr< ::tractor_gps::states_rtkResponse const> states_rtkResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tractor_gps::states_rtkResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tractor_gps::states_rtkResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tractor_gps::states_rtkResponse_<ContainerAllocator1> & lhs, const ::tractor_gps::states_rtkResponse_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tractor_gps::states_rtkResponse_<ContainerAllocator1> & lhs, const ::tractor_gps::states_rtkResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tractor_gps

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tractor_gps::states_rtkResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tractor_gps::states_rtkResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tractor_gps::states_rtkResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tractor_gps::states_rtkResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tractor_gps::states_rtkResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tractor_gps::states_rtkResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tractor_gps::states_rtkResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f2b37e695a8f10e8df0555b3b2850dbe";
  }

  static const char* value(const ::tractor_gps::states_rtkResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf2b37e695a8f10e8ULL;
  static const uint64_t static_value2 = 0xdf0555b3b2850dbeULL;
};

template<class ContainerAllocator>
struct DataType< ::tractor_gps::states_rtkResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tractor_gps/states_rtkResponse";
  }

  static const char* value(const ::tractor_gps::states_rtkResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tractor_gps::states_rtkResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "states_hms data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: tractor_gps/states_hms\n"
"Header header\n"
"uint16 year\n"
"uint8 month\n"
"uint8 day\n"
"uint8 hour\n"
"uint8 min\n"
"float64 sec\n"
"float64[3] data\n"
"float64[6] std\n"
"float64 age\n"
"uint8 Q\n"
"uint8 ns\n"
"float64 ratio\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::tractor_gps::states_rtkResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tractor_gps::states_rtkResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct states_rtkResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tractor_gps::states_rtkResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tractor_gps::states_rtkResponse_<ContainerAllocator>& v)
  {
    s << indent << "data: ";
    s << std::endl;
    Printer< ::tractor_gps::states_hms_<ContainerAllocator> >::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRACTOR_GPS_MESSAGE_STATES_RTKRESPONSE_H
