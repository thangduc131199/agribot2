// Generated by gencpp from file tractor_gps/states_hms.msg
// DO NOT EDIT!


#ifndef TRACTOR_GPS_MESSAGE_STATES_HMS_H
#define TRACTOR_GPS_MESSAGE_STATES_HMS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace tractor_gps
{
template <class ContainerAllocator>
struct states_hms_
{
  typedef states_hms_<ContainerAllocator> Type;

  states_hms_()
    : header()
    , year(0)
    , month(0)
    , day(0)
    , hour(0)
    , min(0)
    , sec(0.0)
    , data()
    , std()
    , age(0.0)
    , Q(0)
    , ns(0)
    , ratio(0.0)  {
      data.assign(0.0);

      std.assign(0.0);
  }
  states_hms_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , year(0)
    , month(0)
    , day(0)
    , hour(0)
    , min(0)
    , sec(0.0)
    , data()
    , std()
    , age(0.0)
    , Q(0)
    , ns(0)
    , ratio(0.0)  {
  (void)_alloc;
      data.assign(0.0);

      std.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _year_type;
  _year_type year;

   typedef uint8_t _month_type;
  _month_type month;

   typedef uint8_t _day_type;
  _day_type day;

   typedef uint8_t _hour_type;
  _hour_type hour;

   typedef uint8_t _min_type;
  _min_type min;

   typedef double _sec_type;
  _sec_type sec;

   typedef boost::array<double, 3>  _data_type;
  _data_type data;

   typedef boost::array<double, 6>  _std_type;
  _std_type std;

   typedef double _age_type;
  _age_type age;

   typedef uint8_t _Q_type;
  _Q_type Q;

   typedef uint8_t _ns_type;
  _ns_type ns;

   typedef double _ratio_type;
  _ratio_type ratio;





  typedef boost::shared_ptr< ::tractor_gps::states_hms_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tractor_gps::states_hms_<ContainerAllocator> const> ConstPtr;

}; // struct states_hms_

typedef ::tractor_gps::states_hms_<std::allocator<void> > states_hms;

typedef boost::shared_ptr< ::tractor_gps::states_hms > states_hmsPtr;
typedef boost::shared_ptr< ::tractor_gps::states_hms const> states_hmsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tractor_gps::states_hms_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tractor_gps::states_hms_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tractor_gps::states_hms_<ContainerAllocator1> & lhs, const ::tractor_gps::states_hms_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.year == rhs.year &&
    lhs.month == rhs.month &&
    lhs.day == rhs.day &&
    lhs.hour == rhs.hour &&
    lhs.min == rhs.min &&
    lhs.sec == rhs.sec &&
    lhs.data == rhs.data &&
    lhs.std == rhs.std &&
    lhs.age == rhs.age &&
    lhs.Q == rhs.Q &&
    lhs.ns == rhs.ns &&
    lhs.ratio == rhs.ratio;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tractor_gps::states_hms_<ContainerAllocator1> & lhs, const ::tractor_gps::states_hms_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tractor_gps

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tractor_gps::states_hms_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tractor_gps::states_hms_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tractor_gps::states_hms_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tractor_gps::states_hms_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tractor_gps::states_hms_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tractor_gps::states_hms_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tractor_gps::states_hms_<ContainerAllocator> >
{
  static const char* value()
  {
    return "492fd46042199508df6dd15363fd81e6";
  }

  static const char* value(const ::tractor_gps::states_hms_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x492fd46042199508ULL;
  static const uint64_t static_value2 = 0xdf6dd15363fd81e6ULL;
};

template<class ContainerAllocator>
struct DataType< ::tractor_gps::states_hms_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tractor_gps/states_hms";
  }

  static const char* value(const ::tractor_gps::states_hms_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tractor_gps::states_hms_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint16 year\n"
"uint8 month\n"
"uint8 day\n"
"uint8 hour\n"
"uint8 min\n"
"float64 sec\n"
"float64[3] data\n"
"float64[6] std\n"
"float64 age\n"
"uint8 Q\n"
"uint8 ns\n"
"float64 ratio\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::tractor_gps::states_hms_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tractor_gps::states_hms_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.year);
      stream.next(m.month);
      stream.next(m.day);
      stream.next(m.hour);
      stream.next(m.min);
      stream.next(m.sec);
      stream.next(m.data);
      stream.next(m.std);
      stream.next(m.age);
      stream.next(m.Q);
      stream.next(m.ns);
      stream.next(m.ratio);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct states_hms_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tractor_gps::states_hms_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tractor_gps::states_hms_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "year: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.year);
    s << indent << "month: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.month);
    s << indent << "day: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.day);
    s << indent << "hour: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hour);
    s << indent << "min: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.min);
    s << indent << "sec: ";
    Printer<double>::stream(s, indent + "  ", v.sec);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "std[]" << std::endl;
    for (size_t i = 0; i < v.std.size(); ++i)
    {
      s << indent << "  std[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.std[i]);
    }
    s << indent << "age: ";
    Printer<double>::stream(s, indent + "  ", v.age);
    s << indent << "Q: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Q);
    s << indent << "ns: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ns);
    s << indent << "ratio: ";
    Printer<double>::stream(s, indent + "  ", v.ratio);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRACTOR_GPS_MESSAGE_STATES_HMS_H
